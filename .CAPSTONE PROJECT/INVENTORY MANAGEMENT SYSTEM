import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton, QLineEdit, QTableWidget, \
    QTableWidgetItem, QFormLayout, QMessageBox, QHBoxLayout
class LoginWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
    def init_ui(self):
        self.setWindowTitle('Login')
        self.setGeometry(100, 100, 400, 300)  # Adjust size and position as needed
        self.setStyleSheet("background-color: #fafafa;")  # Updated background color
        layout = QVBoxLayout()
        layout.setContentsMargins(20, 20, 20, 20)  # Add margins
        self.username = QLineEdit()
        self.username.setPlaceholderText('Username')
        self.username.setStyleSheet("padding: 10px; border-radius: 5px; border: 1px solid #ccc;")
        self.password = QLineEdit()
        self.password.setEchoMode(QLineEdit.Password)
        self.password.setPlaceholderText('Password')
        self.password.setStyleSheet("padding: 10px; border-radius: 5px; border: 1px solid #ccc;")
        self.login_button = QPushButton('Login')
        self.login_button.setStyleSheet("""
                background-color: #4CAF50; 
                color: white; 
                padding: 10px; 
                border-radius: 5px;
                font-size: 16px;
                border: none;
            """)
        self.login_button.clicked.connect(self.handle_login)
        layout.addWidget(self.username)
        layout.addWidget(self.password)
        layout.addWidget(self.login_button)
        self.setLayout(layout)
    def handle_login(self):
        if self.username.text() == 'Avi@gmail.com' and self.password.text() == 'avinash':
            self.close()
            self.main_window = MainWindow()
            self.main_window.show()
        else:
            QMessageBox.warning(self, 'Error', 'Invalid username or password')
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Inventory Management System')
        self.setGeometry(100, 100, 800, 600)

        self.items = []

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # Add Item Section
        self.add_item_widget = QWidget()
        self.add_item_widget.setStyleSheet("background-color: #e8f5e9; padding: 10px; border-radius: 5px;")  # Updated background color
        self.add_item_layout = QFormLayout()
        self.item_name = QLineEdit()
        self.item_quantity = QLineEdit()
        self.item_price = QLineEdit()
        self.add_button = QPushButton('Add Item')
        self.add_button.setStyleSheet("""
            background-color: #4CAF50; 
            color: white; 
            padding: 10px; 
            border-radius: 5px;
            font-size: 16px;
            border: none;
        """)
        self.add_item_layout.addRow('Item Name:', self.item_name)
        self.add_item_layout.addRow('Quantity:', self.item_quantity)
        self.add_item_layout.addRow('Price:', self.item_price)
        self.add_item_layout.addWidget(self.add_button)
        self.add_item_widget.setLayout(self.add_item_layout)

        # Remove Item Section
        self.remove_item_widget = QWidget()
        self.remove_item_widget.setStyleSheet("background-color: #ffebee; padding: 10px; border-radius: 5px;")  # Updated background color
        self.remove_item_layout = QFormLayout()
        self.remove_item_name = QLineEdit()
        self.remove_item_quantity = QLineEdit()  # Added quantity input
        self.remove_button = QPushButton('Remove Item')
        self.remove_button.setStyleSheet("""
            background-color: #f44336; 
            color: white; 
            padding: 10px; 
            border-radius: 5px;
            font-size: 16px;
            border: none;
        """)
        self.remove_item_layout.addRow('Item Name:', self.remove_item_name)
        self.remove_item_layout.addRow('Quantity:', self.remove_item_quantity)  # Added quantity input
        self.remove_item_layout.addWidget(self.remove_button)
        self.remove_item_widget.setLayout(self.remove_item_layout)

        # Table for Showing Items
        self.table = QTableWidget(0, 3)
        self.table.setHorizontalHeaderLabels(['Item Name', 'Quantity', 'Price'])
        self.table.setStyleSheet("""
            QTableWidget {
                border: 1px solid #ccc;
                border-radius: 5px;
                padding: 5px;
                background-color: #ffffff;
            }
            QHeaderView::section {
                background-color: #f4f4f4;
                padding: 5px;
                border: 1px solid #ddd;
            }
        """)

        # Buttons for Showing Totals and Stocks
        self.show_totals_button = QPushButton('Show Totals')
        self.show_stocks_button = QPushButton('Show Stocks')
        self.show_totals_button.setStyleSheet(
            "background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px;")
        self.show_stocks_button.setStyleSheet(
            "background-color: #2196F3; color: white; padding: 10px; border-radius: 5px;")

        # Add Widgets to Layout
        self.layout.addWidget(self.add_item_widget)
        self.layout.addWidget(self.remove_item_widget)
        self.layout.addWidget(self.table)

        # Add Buttons to Layout
        button_layout = QHBoxLayout()
        button_layout.addWidget(self.show_totals_button)
        button_layout.addWidget(self.show_stocks_button)
        self.layout.addLayout(button_layout)

        # Connect Buttons
        self.add_button.clicked.connect(self.add_item)
        self.remove_button.clicked.connect(self.remove_item)
        self.show_totals_button.clicked.connect(self.show_totals)
        self.show_stocks_button.clicked.connect(self.show_stocks)

    def add_item(self):
        name = self.item_name.text()
        quantity = int(self.item_quantity.text())
        price = float(self.item_price.text())
        self.items.append((name, quantity, price))
        self.update_table()
        self.item_name.clear()
        self.item_quantity.clear()
        self.item_price.clear()

    def remove_item(self):
        name = self.remove_item_name.text()
        quantity_to_remove = int(self.remove_item_quantity.text())

        # Update items list based on the quantity
        updated_items = []
        for item in self.items:
            if item[0] == name:
                if item[1] > quantity_to_remove:
                    updated_items.append((item[0], item[1] - quantity_to_remove, item[2]))
                elif item[1] == quantity_to_remove:
                    continue  # Item quantity matches exactly, so it's removed
            else:
                updated_items.append(item)
        self.items = updated_items
        self.update_table()
        self.remove_item_name.clear()
        self.remove_item_quantity.clear()

    def update_table(self):
        self.table.setRowCount(0)
        for item in self.items:
            row_position = self.table.rowCount()
            self.table.insertRow(row_position)
            self.table.setItem(row_position, 0, QTableWidgetItem(item[0]))
            self.table.setItem(row_position, 1, QTableWidgetItem(str(item[1])))
            self.table.setItem(row_position, 2, QTableWidgetItem(f"${item[2]:.2f}"))

    def show_totals(self):
        total_stock = sum(item[1] for item in self.items)
        total_value = sum(item[1] * item[2] for item in self.items)
        QMessageBox.information(self, 'Total Information',
                                f'Total Stock: {total_stock}\nTotal Value: ${total_value:.2f}')

    def show_stocks(self):
        if not self.items:
            QMessageBox.information(self, 'Stock Information', 'No items in inventory.')
            return
        stock_info = '\n'.join(f'{item[0]}: {item[1]} units' for item in self.items)
        QMessageBox.information(self, 'Stock Information', stock_info)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    login = LoginWindow()
    login.setStyleSheet("background-color: #f9f9f9; font-family: Arial, sans-serif;")
    login.show()
    sys.exit(app.exec_())
